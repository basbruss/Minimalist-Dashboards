chip_temperature_color:
  template: chip_temperature
  styles:
    label:
      - color: >
          [[[
            if (states['weather.buienradar'].attributes.temperature  >= 20) return 'orange';
            if (states['weather.buienradar'].attributes.temperature >= 30) return 'red';
            else return '#609ceb';
          ]]]
chip_icon_only_color:
  template: chip_icon_only
  show_icon: true
  tap_action:
    action: "toggle"
  styles:
    grid:
      - grid-template-areas: '"i"'
  state:
    - value: "on"
      styles:
        icon:
          - color: var(--button-card-light-color)
chip_icon_state_color:
  template: chip_icon_state
  tap_action:
    action: "toggle"
  state:
    - value: "on"
      styles:
        label:
          - color: var(--button-card-light-color)
chip_icon_state_color_mdi:
  template: chip_icon_state_color
  show_icon: true
  tap_action:
    action: "toggle"
  label: |
    [[[
      var state = '';
      if (states[variables.ulm_chip_icon_state_entity].state && states[variables.ulm_chip_icon_state_entity].state > 0){
        var state = states[variables.ulm_chip_icon_state_entity].state;
      } 
      return state;
    ]]]
  styles:
    grid:
      - grid-template-areas: '"i l"'
chip_icon_double_state_color:
  template: chip_icon_double_state
  tap_action:
    action: "toggle"
  state:
    - value: "on"
      styles:
        label:
          - color: var(--button-card-light-color)
chip_presence_detection_color:
  template: chips
  triggers_update:
    - "[[[ variables.ulm_chip_presence_counter_residents ]]]"
  label: |
    [[[
      return '🏠 ' +  states[variables.ulm_chip_presence_counter_residents].state 
    ]]]
  state:
    - value: "on"
      styles:
        label:
          - color: var(--button-card-light-color)

### custom made own chips
chip_spotify:
  template: chip_icon_double_state
  state:
    - value: "playing"
      styles:
        label:
          - color: "#1DB954"
        icon:
          - color: "#1DB954"
    - value: "paused"
      styles:
        label:
          - color: "grey"
        icon:
          - color: "grey"
chip_tado:
  show_icon: true
  template: chips
  styles:
    icon:
      - color: |
          [[[
            if (states['climate.woonkamer'].attributes.hvac_action == 'idle') return 'green';
            if (states['climate.woonkamer'].attributes.hvac_action == 'heating') return 'orange';
            else return 'grey';
          ]]]
    grid:
      - grid-template-areas: '"i"'
  tap_action:
    action: more-info
  size: 100%
chip_vacuum:
  show_icon: true
  template: chips
  icon: phu:roborock
  tap_action:
    action: "toggle"
  styles:
    grid:
      - grid-template-areas: '"i"'
  state:
    - value: "on"
      styles:
        icon:
          - color: |
              [[[
                if (states['vacuum.mova'].state == 'cleaning') return 'green';
                if (states['vacuum.mova'].state == 'paused') return 'orange';
                if (states['vacuum.mova'].state == 'returning') return 'yellow';
                else return "#5F9BEA";
              ]]]

vertical_buttons_blue_custom:
  template: vertical_buttons
  show_name: false
  variables:
    variables.ulm_button_blue_icon_on:
    variables.ulm_button_blue_icon_off:
  state:
    - value: "on"
      icon: >
        [[[
          var icon = 'mdi:flash';
            if (variables.ulm_button_blue_icon_on != null){
              var icon = variables.ulm_button_blue_icon_on;
            } 
            else{
              return icon ;
            } 
          return icon ;
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-blue),1)"
        label:
          - color: "rgba(var(--color-blue-text),1)"
        name:
          - color: "rgba(var(--color-blue-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-blue), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-blue), var(--opacity-bg))"
    - value: "off"
      icon: >
        [[[
          var icon = 'mdi:flash-off';
          if (variables.ulm_button_blue_icon_off != null){
            var icon = variables.ulm_button_blue_icon_off;
          } 
          else{
            return icon ;
          }
          return icon ; 
        ]]]
vertical_buttons_green_custom:
  variables:
    state: "default"
  template:
    - vertical_buttons
  state:
    - value: "on"
      icon: >
        [[[
          var icon = 'mdi:flash';
            if (variables.ulm_button_green_icon_on != null){
              var icon = variables.ulm_button_green_icon_on;
            } 
            else{
              return icon ;
            } 
          return icon ;
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-green),1)"
        label:
          - color: "rgba(var(--color-green-text),1)"
        name:
          - color: "rgba(var(--color-green-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-green), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-green), var(--opacity-bg))"
    - value: "off"
      icon: >
        [[[
          var icon = 'mdi:flash-off';
          if (variables.ulm_button_green_icon_off != null){
            var icon = variables.ulm_button_green_icon_off;
          } 
          else{
            return icon ;
          }
          return icon ; 
        ]]]
vertical_buttons_yellow_custom:
  variables:
    state: "default"
  template:
    - vertical_buttons
  state:
    - value: "on"
      icon: >
        [[[
          var icon = 'mdi:flash';
            if (variables.ulm_button_yellow_icon_on != null){
              var icon = variables.ulm_button_yellow_icon_on;
            } 
            else{
              return icon ;
            } 
          return icon ;
        ]]]
      styles:
        icon:
          - color: "rgba(var(--color-yellow),1)"
        label:
          - color: "rgba(var(--color-yellow-text),1)"
        name:
          - color: "rgba(var(--color-yellow-text),1)"
        img_cell:
          - background-color: "rgba(var(--color-yellow), 0.2)"
        card:
          - background-color: "rgba(var(--color-background-yellow),var(--opacity-bg))"
    - value: "off"
      icon: >
        [[[
          var icon = 'mdi:flash-off';
          if (variables.ulm_button_yellow_icon_off != null){
            var icon = variables.ulm_button_yellow_icon_off;
          } 
          else{
            return icon ;
          }
          return icon ; 
        ]]]
### Custom cards
card_person_custom:
  template: icon_info_bg
  variables:
    ulm_card_person_use_entity_picture: false
    ulm_card_person_zone1: ""
    ulm_card_person_zone2: ""
    ulm_card_person_eta: ""
  tap_action:
    action: more-info
  show_label: true
  show_name: true
  label: >
    [[[
        if (states[variables.ulm_card_person_entity].state == 'home'){
          return "Thuis"
        } else if (states[variables.ulm_card_person_entity].state == 'not_home'){
          if(variables.ulm_card_person_eta){
            return "Afwezig" + " | " + states[variables.ulm_card_person_eta].state + " "+states[variables.ulm_card_person_eta].attributes.unit_of_measurement;
            } else {
          return "Afwezig" ;
          }
        } else if (states[variables.ulm_card_person_entity].state == 'Werk'){
          return "Werk";
        } else if (states[variables.ulm_card_person_entity].state == 'Werk Angelique'){
          return "Werk";
        } else if (states[variables.ulm_card_person_entity].state == 'School'){
          return "School";
        }
    ]]]
  name: "[[[ return states[variables.ulm_card_person_entity].attributes.friendly_name ]]]"
  entity: "[[[ return variables.ulm_card_person_entity; ]]]"
  icon: "mdi:face-man"
  show_entity_picture: "[[[ return variables.ulm_card_person_use_entity_picture ]]]"
  entity_picture: >
    [[[
      if (variables.ulm_card_person_entity == 'person.bas_brussee'){
        if(entity.state == 'home'){
          return '/local/images/lovelace/IMG_0141.PNG';
        } else {
          return '/local/images/lovelace/IMG_0142.PNG';
        }
      } else if (variables.ulm_card_person_entity == 'person.angelique'){
        if(entity.state == 'home'){
          return '/local/images/lovelace/IMG_0140.PNG';
        } else {
          return '/local/images/lovelace/IMG_0143.PNG';
        }
      }
    ]]]
  styles:
    icon:
      - color: "rgba(var(--color-theme),0.9)"
      - width: >
          [[[ 
            if (variables.ulm_card_person_use_entity_picture != true){
              return '20px';
            } else {
              return '42px';
            }
          ]]]
      - place-self: >
          [[[ 
            if (variables.ulm_card_person_use_entity_picture != true){
              return 'center';
            } else {
              return 'stretch stretch';
            }
          ]]]
    img_cell:
      - background-color: "rgba(0,0,0,0)"
    custom_fields:
      notification:
        - border-radius: 50%
        - position: absolute
        - left: 38px
        - top: 8px
        - height: 16px
        - width: 16px
        - border: 2px solid var(--card-background-color)
        - font-size: 12px
        - line-height: 14px
        - background-color: >
            [[[
              if (states[variables.ulm_card_person_entity].state != 'home'){
                return "rgba(var(--color-green),1)";
              } else {
                return "rgba(var(--color-blue),1)";
              }
            ]]]
      info:
        - position: absolute
        - right: 6px
        - top: 6px
        - width: 25px
        - height: 25px
  custom_fields:
    notification: >
      [[[
        if (states[variables.ulm_card_person_entity].state != 'home'){
          if (states[variables.ulm_card_person_entity].state == states[variables.ulm_card_person_zone1].attributes.friendly_name){
            var icon = states[variables.ulm_card_person_zone1].attributes.icon != null ? states[variables.ulm_card_person_zone1].attributes.icon : 'mdi:help-circle'
            return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          } else if (states[variables.ulm_card_person_entity].state == states[variables.ulm_card_person_zone2].attributes.friendly_name){
            var icon = states[variables.ulm_card_person_zone2].attributes.icon != null ? states[variables.ulm_card_person_zone2].attributes.icon : 'mdi:help-circle'
            return '<ha-icon icon="' + icon + '" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          } else {
            return '<ha-icon icon="mdi:home-minus" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
          }
        } else {
          return '<ha-icon icon="mdi:home-variant" style="width: 10px; height: 10px; color: var(--primary-background-color);"></ha-icon>';
        }
      ]]]
    info: |
      [[[ {
          const battery = Math.round(states[variables.ulm_card_person_battery].state/1);
          const radius = 20.5; const circumference = radius * 2 * Math.PI;
          return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}"
          stroke="green" stroke-width="3" fill="none"
          style="transform: rotate(-90deg); transform-origin: 50% 50%;
          stroke-dasharray: ${circumference};
          stroke-dashoffset: ${circumference - battery / 100 * circumference};" />
          <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="16" font-weight= "bold"
          text-anchor="middle" alignment-baseline="middle">
          ${battery}<tspan font-size="10">%</tspan></text></svg>`;} ]]]

item_room:
  template: icon_more_info
  variables:
    ulm_name: "[[[ return entity.attributes.friendly_name ]]]"
    count_sensor: "[[[ return variables.count_sensor ]]]"
    ulm_card_light_icon: "[[[ return variables.ulm_card_light_icon ]]]"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        entity: "[[[ return entity.entity_id ]]]"
        hold_action:
          action: "navigate"
          navigation_path: >
            [[[ 
              return variables.ulm_name; 
            ]]]
        icon: >
          [[[
            var icon = 'mdi:lightbulb';
              if (variables.ulm_card_light_icon != null){
                var icon = variables.ulm_card_light_icon;
              } 
              else{
                return icon ;
              } 
            return icon ;
          ]]]
        state:
          - value: "on"
            styles:
              icon:
                - color: >
                    [[[
                      var color = entity.attributes.rgb_color;
                        if (color){
                           return 'rgba(' + color + ',1)'
                        }
                        else{
                          return 'rgba(var(--color-yellow),1)'
                        } 
                    ]]]
              img_cell:
                - background-color: >
                    [[[
                      var color = entity.attributes.rgb_color;
                        if (color){
                           return 'rgba(' + color + ',0.2)'
                        }
                        else{
                          return 'rgba(var(--color-yellow),0.2)'
                        } 
                    ]]]
          - value: "unavailable"
            styles:
              custom_fields:
                notification:
                  - border-radius: 50%
                  - position: absolute
                  - left: 38px
                  - top: 8px
                  - height: 16px
                  - width: 16px
                  - border: 2px solid var(--card-background-color)
                  - font-size: 12px
                  - line-height: 14px
                  - background-color: >
                      [[[
                        return "rgba(var(--color-red),1)";
                      ]]]
    item2:
      card:
        type: "custom:button-card"
        entity: "[[[ return entity.entity_id ]]]"
        name: "[[[ return variables.ulm_name ]]]"
        hold_action:
          action: "navigate"
          navigation_path: >
            [[[ 
              return variables.ulm_name; 
            ]]]
        label: >
          [[[
            if (entity.state == 'on'){
                if (states[variables.count_sensor].state != '1'){
                  return states[variables.count_sensor].state + ' lampen aan';
                } else if (states[variables.count_sensor].state == '1'){
                  return states[variables.count_sensor].state + ' lamp aan';
                }
            } else {
              return 'Lampen uit'
            }
          ]]]
room:
  show_icon: false
  show_name: false
  show_label: false
  state:
    - value: "on"
      styles:
        card:
          - background-color: >-
              [[[
                var color = entity.attributes.rgb_color;
                if(hass.themes.darkMode){
                  if (color){
                    return 'rgba(' + color + ',0.1)'
                  } else {
                    return 'rgba(var(--color-yellow-text),0.1)'
                  }
                }
                return 'rgba(var(--color-background-yellow),var(--opacity-bg)';
              ]]]
  styles:
    grid:
      - grid-template-areas: '"item1"'
      - row-gap: 6px
      - grid-template-rows: min-content
    card:
      - border-radius: var(--border-radius)
      - box-shadow: var(--box-shadow)
      - padding: 12px
      - height: 120px
    custom_fields:
      info:
        - position: absolute
        - right: 7px
        - top: 7px
        - width: 25px
        - height: 25px
  custom_fields:
    item1:
      card:
        type: custom:button-card
        template: item_room
        variables:
          count_sensor: "[[[ return variables.count_sensor ]]]"
          ulm_name: "[[[ return variables.ulm_name ]]]"
          ulm_card_light_icon: "[[[ return variables.ulm_card_light_icon ]]]"
        entity: "[[[ return entity.entity_id ]]]"
    info: |
      [[[ if (entity.state == 'on' && entity.attributes.brightness) {
          const brightness = Math.round(entity.attributes.brightness/2.54);
          const radius = 20.5; const circumference = radius * 2 * Math.PI;
          return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}"
          stroke="var(--button-card-light-color)" stroke-width="3" fill="none"
          style="transform: rotate(-90deg); transform-origin: 50% 50%;
          stroke-dasharray: ${circumference};
          stroke-dashoffset: ${circumference - brightness / 100 * circumference};" />
          <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="16" font-weight= "bold"
          text-anchor="middle" alignment-baseline="middle">
          ${brightness}<tspan font-size="10">%</tspan></text></svg>`;} ]]]
room_button:
  template: room
  styles:
    grid:
      - grid-template-areas: '"item1" "item2"'
      - grid-template-columns: min-content
      - grid-template-rows: min-content min-content
      - row-gap: 6px
  hold_action:
    action: "navigate"
    navigation_path: >
      [[[ 
        return variables.ulm_name; 
      ]]]
  custom_fields:
    info: |
      [[[ if (entity.state == 'on' && entity.attributes.brightness) {
          const brightness = Math.round(entity.attributes.brightness/2.54);
          const radius = 20.5; const circumference = radius * 2 * Math.PI;
          return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}"
          stroke="var(--button-card-light-color)" stroke-width="3" fill="none"
          style="transform: rotate(-90deg); transform-origin: 50% 50%;
          stroke-dasharray: ${circumference};
          stroke-dashoffset: ${circumference - brightness / 100 * circumference};" />
          <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="16" font-weight= "bold"
          text-anchor="middle" alignment-baseline="middle">
          ${brightness}<tspan font-size="10">%</tspan></text></svg>`;} ]]]
    item1:
      card:
        type: custom:button-card
        template: item_room
        variables:
          count_sensor: "[[[ return variables.count_sensor ]]]"
          ulm_name: "[[[ return variables.ulm_name ]]]"
          ulm_card_light_icon: "[[[ return variables.ulm_card_light_icon ]]]"
        entity: "[[[ return entity.entity_id ]]]"
sensor_generic:
  show_icon: true
  show_label: true
  show_name: false
  styles:
    grid:
      - grid-template-areas: '"i l"'
      - grid-template-columns: min-content min-content
      - grid-template-rows: min-content
    img_cell:
      - place-self: center
      - width: 20px
      - height: 20px
    label:
      - justify-self: start
      - align-self: center
      - font-weight: bolder
      - font-size: 11px
      - margin-left: 0px
    card:
      - box-shadow: none
      - padding: 2px
      - background-color: "rgba(0,0,0,0)"
  size: 20px
sensor_temp:
  template: sensor_generic
  icon: mdi:thermometer
  label: "[[[ return states[variables.ulm_temperature].state + '°C' ]]]"
  tap_action:
    action: more-info
  styles:
    icon:
      - color: >
          [[[
            if (states[variables.ulm_climate].attributes.hvac_action == 'idle'){ return 'green';}
            if (states[variables.ulm_climate].attributes.hvac_action == 'heating') {return 'rgb(var(--color-yellow))';}
            else return 'grey';
          ]]]
    label:
      - color: >
          [[[
            if (states[variables.ulm_climate].attributes.hvac_action == 'idle') {return 'green';}
            if (states[variables.ulm_climate].attributes.hvac_action == 'heating') {return 'rgb(var(--color-yellow))';}
            else return 'grey';
          ]]]
sensor_humd:
  template: sensor_generic
  icon: mdi:water
  label: "[[[ return states[variables.ulm_humidity].state + '%' ]]]"
  styles:
    icon:
      - color: >
          [[[
            if (states[variables.ulm_humidity].state > 69) return 'red';
            else return '#3393FF'
          ]]]
    label:
      - color: >
          [[[
            if (states[variables.ulm_humidity].state > 69) return 'red';
            else return '#3393FF'
          ]]]
sensor_pressure:
  template: sensor_generic
  icon: mdi:gauge
  label: "[[[ return states[variables.ulm_pressure].state + 'hPa' ]]]"
sensor_window:
  template: sensor_generic
  icon: >
    [[[ 
      if (states[variables.ulm_window].state == 'on'){ 
        return 'mdi:window-open-variant';
        }
      else{
        return "mdi:window-closed-variant";
        }
    ]]]
  label: >
    [[[ 
      if (states[variables.ulm_window].state == 'on'){ 
        return 'Open';
        }
      else{
        return "Dicht";
        }
    ]]]
sensor_door:
  template: sensor_generic
  icon: >
    [[[ 
      if (states[variables.ulm_door].state == 'on'){ 
        return "mdi:door-open";
        }
      else{
        return "mdi:door";
        }
    ]]]
  label: >
    [[[ 
      if (states[variables.ulm_door].state == 'on'){ 
        return 'Open';
        }
      else{
        return "Dicht";
        }
    ]]]
list_items_4:
  styles:
    grid:
      - grid-template-areas: '"item1 item2" "item3 item4"'
      - grid-template-columns: 1fr 1fr 1fr 1fr
      - grid-template-rows: min-content
      - column-gap: 5px
    card:
      - box-shadow: none
      - padding: 10px
      - margin-left: 12px
      - border-radius: 0px
